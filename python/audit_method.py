from utility import CachedMethod, beta_binomial_cdffrom math import ceil, logimport pandas as pdimport numpy as npclass Bayesian:    def __init__(self, a=1, b=1, thresh=0.95):        self.a = a        self.b = b        self.thresh = thresh            @CachedMethod    def __call__(self, n, t, y_t):        k = ceil(n/2 - y_t)        p_reject = 1 - beta_binomial_cdf(k, y_t+self.a, t-y_t+self.b, n-t)        return p_reject > self.thresh# ## BRAVOclass BRAVO:    def __init__(self, p, alpha, p_0=0.5):        """        :param p: The assumed true share        :param alpha: The risk limit        :param p_0: p_0 used for null hypothesis (default to 0.5)        """        self.alpha = alpha        self.p = p                self.y_val = log(p/p_0)        self.not_y_val = log((1-p)/p_0)        self.thresh = log(1/alpha)    @CachedMethod    def __call__(self, n, t, y_t):        y = y_t        not_y = t - y                # log(p/0.5)^y        sum_y_val = self.y_val * y        # log((1-p)/0.5)^(t-y)        sum_not_y_val = self.not_y_val * not_y                # total log(p/0.5)^y + log((1-p)/0.5)^(t-y) = log()        sum_val = sum_y_val + sum_not_y_val        return sum_val >= self.threshclass Clip:    betas = pd.DataFrame(        [            [2.683, 2.500, 2.236, 2.000, 1.732, 1.155],            [2.887, 2.694, 2.425, 2.145, 1.877, 1.343],            [3.054, 2.864, 2.546, 2.294, 2.000, 1.414],            [3.184, 3.000, 2.670, 2.401, 2.095, 1.511],            [3.290, 3.077, 2.770, 2.496, 2.183, 1.633],            [3.357, 3.144, 2.828, 2.556, 2.240, 1.715],            [3.411, 3.206, 2.889, 2.638, 2.324, 1.747],            [3.487, 3.273, 2.958, 2.684, 2.375, 1.817],            [3.530, 3.309, 3.000, 2.734, 2.438, 1.890],            [3.560, 3.352, 3.040, 2.782, 2.474, 1.937]        ],        columns=[0.01, 0.02, 0.05, 0.1, 0.2, 0.5],        index=[100, 300, 1000, 3000, 10000, 30000, 100000, 300000,               1000000, 3000000])    def __init__(self, n, alpha):        assert n in self.betas.index and alpha in self.betas.columns                self.n = n        self.alpha = alpha        self.beta = self.betas.loc[n, alpha]            @CachedMethod    def __call__(self, n, t, y_t):        a = y_t        b = t - y_t        return a - b > self.beta * np.sqrt(t)